import { useEffect, useState } from "react";
import Head from "next/head";
import Fuse from "fuse.js";
import { GetServerSidePropsContext } from "next";
import { CategoryEnum, ICategory, IPost } from "../utils/types";
import Categories from "../components/Categories";
import Posts from "../components/Posts";
import { fetchPosts } from "../utils/fetch";
import styled from "@emotion/styled";
import Modal from "../components/Modal";
import Dropdown from "../components/Dropdown";
import Search from "../components/Search";
import { useRouter } from "next/router";
import { useQuery } from "react-query";

const Home = ({
  posts,
  categories,
  query,
  filter,
  prefilteredPosts,
}: {
  posts: IPost[];
  categories: ICategory[];
  query: string;
  filter: string;
  prefilteredPosts: IPost[];
}) => {
  const router = useRouter();
  const [currentCategory, setCategory] = useState<ICategory>(
    filter
      ? { id: filter, name: CategoryEnum[Number(filter)] }
      : {
          id: 0,
          name: "All posts",
        }
  );
  const [currentPosts, setPosts] = useState(posts);
  const [filteredPosts, setFilteredPosts] = useState(
    prefilteredPosts ?? currentPosts
  );
  const [deleteModalOpen, setOpen] = useState(false);
  const [deletePost, setDeletePost] = useState<IPost>();
  const [searchQuery, setSearchQuery] = useState<string>(query);

  const fuse = new Fuse(filteredPosts, {
    keys: ["title", "excerpt"],
  });

  const handleConfirmDelete = (post: IPost) => {
    setDeletePost(post);
    setOpen(true);
  };
  const handleDeleteSingle = () => {
    setFilteredPosts((filteredPosts) =>
      filteredPosts.filter((post) => post.slug !== deletePost?.slug)
    );
    setPosts((currentPosts) =>
      currentPosts.filter((post) => post.slug !== deletePost?.slug)
    );
    setOpen(false);
  };
  const handleDeleteByCategory = (category: ICategory) => {
    setFilteredPosts((filteredPosts) =>
      filteredPosts.filter((post) => post.post_category_id !== category.id)
    );
    setPosts((currentPosts) =>
      currentPosts.filter((post) => post.post_category_id !== category.id)
    );
  };

  // would extract this methods in another file
  const handleCategoryChange = (category: ICategory) => {
    if (category.id === 0) {
      delete router.query.filter;
      router.replace(
        {
          pathname: "/",
          query: {
            ...router.query,
          },
        },
        undefined,
        {
          shallow: true,
        }
      );
      setFilteredPosts(currentPosts);
    } else {
      router.replace(
        {
          pathname: "/",
          query: {
            ...router.query,
            filter: category.id,
          },
        },
        undefined,
        {
          shallow: true,
        }
      );
      setFilteredPosts(
        currentPosts.filter(
          (item: IPost) => item.post_category_id === category.id
        )
      );
    }
  };

  const searchPosts = (e: Event) => {
    e.preventDefault();
    router.replace(
      {
        pathname: "/",
        query: {
          ...router.query,
          query: searchQuery,
        },
      },
      undefined,
      {
        shallow: true,
      }
    );
    if (searchQuery.length < 3) {
      delete router.query.query;
      router.replace(
        {
          pathname: "/",
          query: {
            ...router.query,
          },
        },
        undefined,
        {
          shallow: true,
        }
      );
      handleCategoryChange(currentCategory);
    } else {
      setFilteredPosts(
        fuse.search(searchQuery).map((searchItem) => searchItem.item)
      );
    }
  };
  return (
    <div>
      <Head>
        <title>Article filter and search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <AppWrapper>
          <Categories
            currentCategory={currentCategory}
            categories={categories}
            setCategory={setCategory}
            handleCategoryChange={handleCategoryChange}
          />
          <div id="filterSearch">
            <Dropdown
              categories={categories}
              handleDeleteByCategory={handleDeleteByCategory}
            />
            <Search
              searchPosts={searchPosts}
              searchQuery={searchQuery}
              setSearchQuery={setSearchQuery}
            />
          </div>

          <Posts
            handleConfirmDelete={handleConfirmDelete}
            currentCategory={currentCategory}
            posts={filteredPosts}
            totalPostsLength={currentPosts.length}
          />
        </AppWrapper>
        {deleteModalOpen ? (
          <Modal
            open={deleteModalOpen}
            setOpen={setOpen}
            title={`Jeste li sigurni da želite obrisati post?`}
          >
            <DeleteButton onClick={handleDeleteSingle}>Obriši</DeleteButton>
          </Modal>
        ) : null}
      </main>
    </div>
  );
};

export default Home;

export async function getServerSideProps(props: GetServerSidePropsContext) {
  const { query, filter } = props.query;
  const posts = await fetchPosts();

  const categories = Array.from(
    new Set(posts.map((post) => post.post_category_id))
  ).map((post) => ({ id: post, name: CategoryEnum[Number(post)] }));

  const prefilteredPosts = () => {
    const fuse = new Fuse(posts, {
      keys: ["title", "excerpt"],
    });
    if (filter && query) {
      return fuse
        .search(String(query))
        .map((searchItem) => searchItem.item)
        .filter((item: IPost) => item.post_category_id === filter);
    } else if (filter) {
      return posts.filter((item: IPost) => item.post_category_id === filter);
    } else if (query) {
      return fuse.search(String(query)).map((searchItem) => searchItem.item);
    } else return null;
  };

  return {
    props: {
      posts,
      categories,
      query: query ?? "",
      filter: filter ?? "",
      prefilteredPosts: prefilteredPosts(),
    }, // will be passed to the page component as props
  };
}

const AppWrapper = styled.div`
  max-width: 1280px;
  width: 100%;
  margin: 0 auto;
  div[id="filterSearch"] {
    display: flex;
    align-items: center;
    @media (max-width: 1024px) {
      flex-direction: column;
    }
  }
`;
const DeleteButton = styled.button`
  display: flex;
  margin: 0.25rem auto;
  padding: 0.5rem 0.75rem;
  background-color: #dc2626;
  color: white;
  font-size: 1.125rem;
  border-radius: 0.25rem;
`;
